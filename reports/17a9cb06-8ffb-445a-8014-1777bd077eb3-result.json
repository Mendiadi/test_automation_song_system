{"name": "test_upvote_invalid_playlist", "status": "skipped", "statusDetails": {"message": "XFAIL playlist not exists! why is it work? why we need playlist for vote songs anyway?\n\nAssertionError: vote even playlist not exists\nassert None\n +  where None = {'data': {'rating': 1, 'song_title': 'israel vibes'}, 'message': 'OK'}.error\n +    where {'data': {'rating': 1, 'song_title': 'israel vibes'}, 'message': 'OK'} = <bound method SongsAPI.upvote of <logic.endpoints.SongsAPI object at 0x0000025997EE7410>>(Voting(playlist_name='noexists', song_title='israel vibes', user_name='Efpnnr', user_password='P1XYgUH3'))\n +      where <bound method SongsAPI.upvote of <logic.endpoints.SongsAPI object at 0x0000025997EE7410>> = <logic.endpoints.SongsAPI object at 0x0000025997EE7410>.upvote", "trace": "self = <tests.test_songs.TestSongs object at 0x00000259981E1390>\nsongs = <logic.endpoints.SongsAPI object at 0x0000025997EE7410>\nset_up_song = Song(song_genre='pop', song_performer='adi', song_title='israel vibes', song_year=2020)\nset_up_user = User(user_name='Efpnnr', user_password='P1XYgUH3')\n\n    @allure.story(\"user should insert exists playlist for voting\")\n    @pytest.mark.xfail(reason=\"playlist not exists! why is it work? \"\n                              \"why we need playlist for vote songs anyway?\")\n    def test_upvote_invalid_playlist(self, songs, set_up_song, set_up_user):\n        user = set_up_user\n        song = set_up_song\n        vote = schemas.Voting(\"noexists\", song.song_title, **user.as_json())\n>       assert songs.upvote(vote).error, \"vote even playlist not exists\"\nE       AssertionError: vote even playlist not exists\nE       assert None\nE        +  where None = {'data': {'rating': 1, 'song_title': 'israel vibes'}, 'message': 'OK'}.error\nE        +    where {'data': {'rating': 1, 'song_title': 'israel vibes'}, 'message': 'OK'} = <bound method SongsAPI.upvote of <logic.endpoints.SongsAPI object at 0x0000025997EE7410>>(Voting(playlist_name='noexists', song_title='israel vibes', user_name='Efpnnr', user_password='P1XYgUH3'))\nE        +      where <bound method SongsAPI.upvote of <logic.endpoints.SongsAPI object at 0x0000025997EE7410>> = <logic.endpoints.SongsAPI object at 0x0000025997EE7410>.upvote\n\ntests\\test_songs.py:80: AssertionError"}, "steps": [{"name": "upvote to {'playlist_name': 'noexists', 'song_title': 'israel vibes', 'user_name': 'Efpnnr', 'user_password': 'P1XYgUH3'}", "status": "passed", "start": 1679905953038, "stop": 1679905953075}], "attachments": [{"name": "log", "source": "88de89ae-c4f2-4487-8176-a527d257ca2c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d36168b7-0b9d-4f5c-9614-44681f9e90d9-attachment.txt", "type": "text/plain"}], "start": 1679905953038, "stop": 1679905953075, "uuid": "aa9388d6-51aa-4686-a3af-164d2e90bf26", "historyId": "3a98006e3058f8bf7bee7f308bb9d2bc", "testCaseId": "b5f22859f395809fc257a8c9cc3a1569", "fullName": "tests.test_songs.TestSongs#test_upvote_invalid_playlist", "labels": [{"name": "story", "value": "user should insert exists playlist for voting"}, {"name": "epic", "value": "songs api"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='playlist not exists! why is it work? why we need playlist for vote songs anyway?')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "tag", "value": "songs"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_songs"}, {"name": "subSuite", "value": "TestSongs"}, {"name": "host", "value": "LAP-adim"}, {"name": "thread", "value": "14200-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_songs"}]}