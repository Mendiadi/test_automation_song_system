{"name": "test_ranked_songs_equal[0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == '0'\n +  where 0 = SongResponse(genre='Ogjmaj', performer='Mngnuw', rating=0, title='Xrjix Snxzd Qhhov ', year=1903).rating\n +    where SongResponse(genre='Ogjmaj', performer='Mngnuw', rating=0, title='Xrjix Snxzd Qhhov ', year=1903) = <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>>(['Xrjix Snxzd Qhhov ', 'Bfu Biw Jve ', 'Gfo Imh Smj ', 'Givb Rtku Sfbr ', 'Fuo Yva Sdh ', 'Erjm Rvtg Qxue ', ...])\n +      where <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>> = <logic.endpoints.SongsAPI object at 0x0000011660D15290>.get_song", "trace": "self = <tests.test_songs.TestSongs object at 0x0000011660D4F8D0>, setup_songs = None\nsongs = <logic.endpoints.SongsAPI object at 0x0000011660D15290>, rate = '0'\n\n    @pytest.mark.dev\n    @pytest.mark.parametrize(\"rate\",\"1,0,2\")\n    def test_ranked_songs_equal(self,setup_songs,songs,rate):\n        for s in songs.ranked_songs(\"eq\",rate):\n>           assert songs.get_song(s).rating == rate\nE           AssertionError: assert 0 == '0'\nE            +  where 0 = SongResponse(genre='Ogjmaj', performer='Mngnuw', rating=0, title='Xrjix Snxzd Qhhov ', year=1903).rating\nE            +    where SongResponse(genre='Ogjmaj', performer='Mngnuw', rating=0, title='Xrjix Snxzd Qhhov ', year=1903) = <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>>(['Xrjix Snxzd Qhhov ', 'Bfu Biw Jve ', 'Gfo Imh Smj ', 'Givb Rtku Sfbr ', 'Fuo Yva Sdh ', 'Erjm Rvtg Qxue ', ...])\nE            +      where <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>> = <logic.endpoints.SongsAPI object at 0x0000011660D15290>.get_song\n\ntests\\test_songs.py:157: AssertionError"}, "steps": [{"name": "getting ranked songs op=eq rate=0", "status": "passed", "start": 1679905103164, "stop": 1679905103186}, {"name": "getting the song ['Xrjix Snxzd Qhhov ', 'Bfu Biw Jve ', 'Gfo Imh Smj ', 'Givb Rtku Sfbr ', 'Fuo Yva Sdh ', 'Erjm Rvtg Qxue ', 'Slzwp Mlwhx Iopjn ', 'Whzkn Wdbpp Qljrf ', 'Qnkhkv Xyusrw Vlwrjx ']", "status": "passed", "start": 1679905103186, "stop": 1679905103197}], "attachments": [{"name": "log", "source": "b08ffb3d-f0ae-4162-9e22-7683be59cb3c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "56ae8bb7-333f-4333-ab14-1bfb2b4ae2b8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "rate", "value": "'0'"}], "start": 1679905103164, "stop": 1679905103197, "uuid": "b58fa7d2-bc60-4621-8b2e-ad1ce2804f2d", "historyId": "da89d4fd1e5a8273ab9b65f25f803fa0", "testCaseId": "fb56294a2938566da613af33ebb5fa85", "fullName": "tests.test_songs.TestSongs#test_ranked_songs_equal", "labels": [{"name": "epic", "value": "songs api"}, {"name": "tag", "value": "dev"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "tag", "value": "songs"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_songs"}, {"name": "subSuite", "value": "TestSongs"}, {"name": "host", "value": "LAP-adim"}, {"name": "thread", "value": "8660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_songs"}]}