{"name": "test_ranked_songs_equal[1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1 == '1'\n +  where 1 = SongResponse(genre='Kffpmb', performer='Brwwzb', rating=1, title='Pnlolf Ehksdn Bjlayl ', year=1932).rating\n +    where SongResponse(genre='Kffpmb', performer='Brwwzb', rating=1, title='Pnlolf Ehksdn Bjlayl ', year=1932) = <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>>(['Pnlolf Ehksdn Bjlayl ', 'Kvgmt Kcpgr Zljdq ', 'Rgiez Vghsx Teqln ', 'Izlt Zsae Kxga ', 'Yfgmz Bznri Gdkaz ', 'Hlpz Ylbu Jgif ', ...])\n +      where <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>> = <logic.endpoints.SongsAPI object at 0x0000011660D15290>.get_song", "trace": "self = <tests.test_songs.TestSongs object at 0x0000011660D4F890>, setup_songs = None\nsongs = <logic.endpoints.SongsAPI object at 0x0000011660D15290>, rate = '1'\n\n    @pytest.mark.dev\n    @pytest.mark.parametrize(\"rate\",\"1,0,2\")\n    def test_ranked_songs_equal(self,setup_songs,songs,rate):\n        for s in songs.ranked_songs(\"eq\",rate):\n>           assert songs.get_song(s).rating == rate\nE           AssertionError: assert 1 == '1'\nE            +  where 1 = SongResponse(genre='Kffpmb', performer='Brwwzb', rating=1, title='Pnlolf Ehksdn Bjlayl ', year=1932).rating\nE            +    where SongResponse(genre='Kffpmb', performer='Brwwzb', rating=1, title='Pnlolf Ehksdn Bjlayl ', year=1932) = <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>>(['Pnlolf Ehksdn Bjlayl ', 'Kvgmt Kcpgr Zljdq ', 'Rgiez Vghsx Teqln ', 'Izlt Zsae Kxga ', 'Yfgmz Bznri Gdkaz ', 'Hlpz Ylbu Jgif ', ...])\nE            +      where <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>> = <logic.endpoints.SongsAPI object at 0x0000011660D15290>.get_song\n\ntests\\test_songs.py:157: AssertionError"}, "steps": [{"name": "getting ranked songs op=eq rate=1", "status": "passed", "start": 1679905097946, "stop": 1679905097980}, {"name": "getting the song ['Pnlolf Ehksdn Bjlayl ', 'Kvgmt Kcpgr Zljdq ', 'Rgiez Vghsx Teqln ', 'Izlt Zsae Kxga ', 'Yfgmz Bznri Gdkaz ', 'Hlpz Ylbu Jgif ', 'Ksagqo Dhfvbx Mgampn ', 'Xwko Uzmw Wjlp ', 'Pzv Zyv Iul ', 'Ykcal Binig Argog ']", "status": "passed", "start": 1679905097980, "stop": 1679905097988}], "attachments": [{"name": "log", "source": "6fcf9896-b27e-4ff6-9d9a-dc91c63ef6de-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9a8b452e-ae67-47fd-82f0-de0d30f63157-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "rate", "value": "'1'"}], "start": 1679905097946, "stop": 1679905097988, "uuid": "a08597d7-43ab-49ff-af92-02aa26e179f3", "historyId": "e27ce4d75a51f112344ba60b8af99d22", "testCaseId": "fb56294a2938566da613af33ebb5fa85", "fullName": "tests.test_songs.TestSongs#test_ranked_songs_equal", "labels": [{"name": "epic", "value": "songs api"}, {"name": "tag", "value": "dev"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "tag", "value": "songs"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_songs"}, {"name": "subSuite", "value": "TestSongs"}, {"name": "host", "value": "LAP-adim"}, {"name": "thread", "value": "8660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_songs"}]}