{"name": "test_add_friend_no_friend_user", "status": "skipped", "statusDetails": {"message": "XFAIL BUG- Error message are wrong\n\nAssertionError: error message not shows up like excepted\nassert None == 'the user notexists does not exist'\n +  where None = {'data': 'notexists', 'message': 'OK'}.error\n +    where {'data': 'notexists', 'message': 'OK'} = <bound method UsersAPI.add_friend of <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>>(Friend(friend_name='notexists', user_name='Rnkpib', user_password='QgfrmOnP'))\n +      where <bound method UsersAPI.add_friend of <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>> = <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>.add_friend\n +  and   'the user notexists does not exist' = not_exists_e_msg_2('notexists')\n +    where 'notexists' = Friend(friend_name='notexists', user_name='Rnkpib', user_password='QgfrmOnP').friend_name", "trace": "self = <tests.test_users.TestUsers object at 0x0000020B5A8917D0>\nusers = <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>\nset_up_user = User(user_name='Rnkpib', user_password='QgfrmOnP')\n\n    @allure.story(\"must provide valid user friend for add friend\")\n    @pytest.mark.xfail(reason=\"BUG- Error message are wrong\")\n    def test_add_friend_no_friend_user(self, users, set_up_user):\n        user = set_up_user\n        friend = schemas.Friend(\"notexists\", user.user_name, user.user_password)\n        assert users.get_user(friend.friend_name).error == not_exists_e_msg(friend.friend_name)\n        assert friend.friend_name not in users.get_user(user.user_name).friends, \"friend added even not exists\"\n>       assert users.add_friend(friend).error == not_exists_e_msg_2(friend.friend_name), \\\n            \"error message not shows up like excepted\"\nE       AssertionError: error message not shows up like excepted\nE       assert None == 'the user notexists does not exist'\nE        +  where None = {'data': 'notexists', 'message': 'OK'}.error\nE        +    where {'data': 'notexists', 'message': 'OK'} = <bound method UsersAPI.add_friend of <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>>(Friend(friend_name='notexists', user_name='Rnkpib', user_password='QgfrmOnP'))\nE        +      where <bound method UsersAPI.add_friend of <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>> = <logic.endpoints.UsersAPI object at 0x0000020B5A732B50>.add_friend\nE        +  and   'the user notexists does not exist' = not_exists_e_msg_2('notexists')\nE        +    where 'notexists' = Friend(friend_name='notexists', user_name='Rnkpib', user_password='QgfrmOnP').friend_name\n\ntests\\test_users.py:181: AssertionError"}, "steps": [{"name": "getting the user notexists", "status": "passed", "start": 1679895561143, "stop": 1679895561150}, {"name": "getting the user Rnkpib", "status": "passed", "start": 1679895561150, "stop": 1679895561174}, {"name": "add friend {'friend_name': 'notexists', 'user_name': 'Rnkpib', 'user_password': 'QgfrmOnP'}", "status": "passed", "start": 1679895561174, "stop": 1679895561189}], "attachments": [{"name": "log", "source": "12b454d5-7a61-4d81-842e-10c177a105a7-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "ac87ae76-03a7-4d1a-9c98-537b5ab0f548-attachment.txt", "type": "text/plain"}], "start": 1679895561143, "stop": 1679895561189, "uuid": "d41d0caf-bb8d-46c9-a669-a49341dac8ec", "historyId": "daaf122250f881ed5dc170d58cf42115", "testCaseId": "2f440b1ffe123026507755752dab2603", "fullName": "tests.test_users.TestUsers#test_add_friend_no_friend_user", "labels": [{"name": "epic", "value": "users api"}, {"name": "story", "value": "must provide valid user friend for add friend"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='BUG- Error message are wrong')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "tag", "value": "users"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_users"}, {"name": "subSuite", "value": "TestUsers"}, {"name": "host", "value": "LAP-adim"}, {"name": "thread", "value": "9276-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_users"}]}