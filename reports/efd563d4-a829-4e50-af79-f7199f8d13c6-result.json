{"name": "test_ranked_songs_equal[2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 2 == '2'\n +  where 2 = SongResponse(genre='Nvnsiu', performer='Rfavqr', rating=2, title='Mdwuro Fnbnrw Digeni ', year=1904).rating\n +    where SongResponse(genre='Nvnsiu', performer='Rfavqr', rating=2, title='Mdwuro Fnbnrw Digeni ', year=1904) = <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>>(['Mdwuro Fnbnrw Digeni ', 'Ruc Jcg Zyk ', 'Meyiba Vqkoyx Iiqoco ', 'Xbpsqy Exauwd Vupwas ', 'Gkj Ssb Ljy ', 'Xnf Sju Mqb ', ...])\n +      where <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>> = <logic.endpoints.SongsAPI object at 0x0000011660D15290>.get_song", "trace": "self = <tests.test_songs.TestSongs object at 0x0000011660D4FF50>, setup_songs = None\nsongs = <logic.endpoints.SongsAPI object at 0x0000011660D15290>, rate = '2'\n\n    @pytest.mark.dev\n    @pytest.mark.parametrize(\"rate\",\"1,0,2\")\n    def test_ranked_songs_equal(self,setup_songs,songs,rate):\n        for s in songs.ranked_songs(\"eq\",rate):\n>           assert songs.get_song(s).rating == rate\nE           AssertionError: assert 2 == '2'\nE            +  where 2 = SongResponse(genre='Nvnsiu', performer='Rfavqr', rating=2, title='Mdwuro Fnbnrw Digeni ', year=1904).rating\nE            +    where SongResponse(genre='Nvnsiu', performer='Rfavqr', rating=2, title='Mdwuro Fnbnrw Digeni ', year=1904) = <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>>(['Mdwuro Fnbnrw Digeni ', 'Ruc Jcg Zyk ', 'Meyiba Vqkoyx Iiqoco ', 'Xbpsqy Exauwd Vupwas ', 'Gkj Ssb Ljy ', 'Xnf Sju Mqb ', ...])\nE            +      where <bound method SongsAPI.get_song of <logic.endpoints.SongsAPI object at 0x0000011660D15290>> = <logic.endpoints.SongsAPI object at 0x0000011660D15290>.get_song\n\ntests\\test_songs.py:157: AssertionError"}, "steps": [{"name": "getting ranked songs op=eq rate=2", "status": "passed", "start": 1679905109667, "stop": 1679905109683}, {"name": "getting the song ['Mdwuro Fnbnrw Digeni ', 'Ruc Jcg Zyk ', 'Meyiba Vqkoyx Iiqoco ', 'Xbpsqy Exauwd Vupwas ', 'Gkj Ssb Ljy ', 'Xnf Sju Mqb ', 'Pxzp Wdlf Ufgl ', 'Qwiu Yzzj Bboc ', 'Hgc Eao Ouu ', 'Igr Fks Zye ', 'Sral Uqgr Obzz ']", "status": "passed", "start": 1679905109683, "stop": 1679905109730}], "attachments": [{"name": "log", "source": "c432b1a7-9f5f-46f4-bd5a-9f9d6b5b09ed-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4b69f22b-2703-485e-bee1-4deeb0c19ed8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "rate", "value": "'2'"}], "start": 1679905109651, "stop": 1679905109730, "uuid": "1be61e17-185e-44f8-8b84-245f8be01706", "historyId": "e0b838e1e464610ac7ec25e209bda858", "testCaseId": "fb56294a2938566da613af33ebb5fa85", "fullName": "tests.test_songs.TestSongs#test_ranked_songs_equal", "labels": [{"name": "epic", "value": "songs api"}, {"name": "tag", "value": "dev"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "tag", "value": "songs"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_songs"}, {"name": "subSuite", "value": "TestSongs"}, {"name": "host", "value": "LAP-adim"}, {"name": "thread", "value": "8660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_songs"}]}