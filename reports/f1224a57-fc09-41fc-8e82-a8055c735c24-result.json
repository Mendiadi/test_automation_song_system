{"name": "test_add_song_invalid_data_type", "status": "skipped", "statusDetails": {"message": "XFAIL song created with not valid year\n\nAssertionError: song added with year that not valid\nassert {'invalid': 'type'} != {'invalid': 'type'}", "trace": "self = <tests.test_songs.TestSongs object at 0x00000259981F8B50>\nsongs = <logic.endpoints.SongsAPI object at 0x0000025997EE7410>\n\n    @allure.story(\"as user im want year only in valid format\")\n    @pytest.mark.xfail(reason=\"song created with not valid year\")\n    def test_add_song_invalid_data_type(self, songs):\n        song = schemas.Song.create_randomly(song_year={\"invalid\": \"type\"})\n        assert not songs.add_song(song).error\n        year = songs.get_song(song.song_title).year\n>       assert year != {\"invalid\": \"type\"}, \"song added with year that not valid\"\nE       AssertionError: song added with year that not valid\nE       assert {'invalid': 'type'} != {'invalid': 'type'}\n\ntests\\test_songs.py:34: AssertionError"}, "steps": [{"name": "adding song {'song_genre': 'Xllusb', 'song_performer': 'Zyjjmv', 'song_title': 'Red Hrc Feb ', 'song_year': {'invalid': 'type'}} to the system", "status": "passed", "start": 1679905951393, "stop": 1679905951456}, {"name": "getting the song Red Hrc Feb ", "status": "passed", "start": 1679905951456, "stop": 1679905951509}], "attachments": [{"name": "log", "source": "26ee3b34-72e3-4aea-8709-34f70275427b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2e0946d7-53cf-4f79-867a-ab04a0b2bd5b-attachment.txt", "type": "text/plain"}], "start": 1679905951393, "stop": 1679905951509, "uuid": "8cada690-547a-4fae-9a4d-5ae014a40e81", "historyId": "5070e16b0311eca8816f83ac158082c0", "testCaseId": "a4e054d9bc6fe55b468b3b65d3654682", "fullName": "tests.test_songs.TestSongs#test_add_song_invalid_data_type", "labels": [{"name": "story", "value": "as user im want year only in valid format"}, {"name": "epic", "value": "songs api"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='song created with not valid year')"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "tag", "value": "songs"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_songs"}, {"name": "subSuite", "value": "TestSongs"}, {"name": "host", "value": "LAP-adim"}, {"name": "thread", "value": "14200-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_songs"}]}